const { PrismaClient } = require('@prisma/client');

async function testarConexao() {
  console.log('üîç Testando conex√£o com Supabase...\n');
  
  const prisma = new PrismaClient({
    log: ['query', 'error', 'warn']
  });

  try {
    // Teste 1: Conex√£o b√°sica
    console.log('1Ô∏è‚É£ Testando conex√£o...');
    await prisma.$connect();
    console.log('   ‚úÖ Conectado!\n');

    // Teste 2: Buscar usu√°rio
    console.log('2Ô∏è‚É£ Buscando usu√°rio...');
    const user = await prisma.user.findFirst();
    if (user) {
      console.log('   ‚úÖ Usu√°rio encontrado:', user.email);
      console.log('   ID:', user.id);
    } else {
      console.log('   ‚ùå Nenhum usu√°rio encontrado!');
    }

    // Teste 3: Buscar restaurantes
    console.log('\n3Ô∏è‚É£ Buscando restaurantes...');
    const restaurants = await prisma.restaurant.findMany();
    console.log('   Total:', restaurants.length);
    restaurants.forEach(r => {
      console.log('   -', r.name, '(userId:', r.userId, ')');
    });

    // Teste 4: Verificar se user tem restaurante
    if (user) {
      console.log('\n4Ô∏è‚É£ Verificando restaurantes do usu√°rio...');
      const userRestaurants = await prisma.restaurant.findMany({
        where: { userId: user.id }
      });
      console.log('   Restaurantes vinculados ao user:', userRestaurants.length);
    }

    console.log('\n‚úÖ TODOS OS TESTES PASSARAM!\n');

  } catch (error) {
    console.error('\n‚ùå ERRO:', error.message);
    console.error('\nDetalhes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testarConexao();
