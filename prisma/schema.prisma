generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  restaurants   Restaurant[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id               String     @id @default(cuid())
  name             String
  description      String?
  slug             String     @unique
  logo             String?
  bannerImage      String?
  primaryColor     String     @default("#d32f2f")
  secondaryColor   String     @default("#ffc107")
  logoUrl          String?
  bannerUrl        String?
  theme            String     @default("light")
  showDeliveryTime Boolean    @default(true)
  showRatings      Boolean    @default(true)
  customCss        String?
  phone            String?
  email            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  openTime         String?
  closeTime        String?
  workingDays      String?    @default("")
  facebook         String?
  instagram        String?
  twitter          String?
  whatsapp         String?
  isActive         Boolean    @default(true)
  allowOrders      Boolean    @default(true)
  deliveryFee      Float      @default(0)
  minOrderValue    Float      @default(0)
  userId           String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  categories       Category[]
  menuItems        MenuItem[]
  orders           Order[]
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id           String     @id @default(cuid())
  name         String
  description  String?
  icon         String?
  sortOrder    Int        @default(0)
  isActive     Boolean    @default(true)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems    MenuItem[]

  @@unique([restaurantId, name])
}

model MenuItem {
  id            String      @id @default(cuid())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  image         String?
  isActive      Boolean     @default(true)
  isPromo       Boolean     @default(false)
  promoTag      String?
  sortOrder     Int         @default(0)
  calories      Int?
  servingSize   String?
  ingredients   String?
  allergens     String?
  restaurantId  String
  categoryId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  total           Float
  deliveryFee     Float         @default(0)
  customerName    String
  customerEmail   String?
  customerPhone   String
  customerAddress String?
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  restaurantId    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  restaurant      Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?
  orderId    String
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Analytics {
  id           String   @id @default(cuid())
  restaurantId String
  date         DateTime @default(now())
  pageViews    Int      @default(0)
  menuViews    Int      @default(0)
  itemViews    Json?
  totalOrders  Int      @default(0)
  totalRevenue Float    @default(0)

  @@unique([restaurantId, date])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
