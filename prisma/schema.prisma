// Prisma Schema - Supabase PostgreSQL
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String         @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  resetToken       String?        @unique
  resetTokenExpiry DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  role             UserRole       @default(STAFF)
  cpfCnpj          String?        @unique
  phone            String?
  accounts         Account[]
  payments         Payment[]
  restaurants      Restaurant[]
  sessions         Session[]
  subscriptions    Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id               String       @id @default(cuid())
  name             String
  description      String?
  slug             String       @unique
  logo             String?
  bannerImage      String?
  primaryColor     String       @default("#d32f2f")
  secondaryColor   String       @default("#ffc107")
  email            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  openTime         String?
  closeTime        String?
  workingDays      String?      @default("")
  facebook         String?
  instagram        String?
  twitter          String?
  whatsapp         String?
  isActive         Boolean      @default(true)
  allowOrders      Boolean      @default(true)
  deliveryFee      Float        @default(0)
  minOrderValue    Float        @default(0)
  userId           String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  bannerUrl        String?
  customCss        String?
  logoUrl          String?
  showDeliveryTime Boolean      @default(true)
  showRatings      Boolean      @default(true)
  theme            String       @default("light")
  pixKey              String?
  pixQrCode           String?                // Deprecated: não usado mais, mas mantido para compatibilidade
  categories          Category[]
  coupons             Coupon[]
  ingredients         Ingredient[]
  menuItems           MenuItem[]
  orders              Order[]
  tables              Table[]
  waiterCalls         WaiterCall[]
  customizationGroups CustomizationGroup[]
  upsellRules         UpsellRule[]
  user                User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id           String     @id @default(cuid())
  name         String
  description  String?
  icon         String?
  sortOrder    Int        @default(0)
  isActive     Boolean    @default(true)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems    MenuItem[]

  @@unique([restaurantId, name])
}

model MenuItem {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  price               Float
  cost                Float?                // Custo do produto (para cálculo de lucro)
  originalPrice       Float?
  image               String?
  isActive            Boolean               @default(true)
  isPromo             Boolean               @default(false)
  promoTag            String?
  sortOrder           Int                   @default(0)
  calories            Int?
  servingSize         String?
  ingredients         String?
  allergens           String?
  restaurantId        String
  categoryId          String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  category            Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurant          Restaurant            @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems          OrderItem[]
  recipe              Recipe?
  customizationGroups CustomizationGroup[]
}

model CustomizationGroup {
  id            String                 @id @default(cuid())
  name          String
  description   String?
  isRequired    Boolean                @default(false)
  minSelections Int                    @default(0)
  maxSelections Int?
  sortOrder     Int                    @default(0)
  isActive      Boolean                @default(true)
  restaurantId  String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  restaurant    Restaurant             @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  options       CustomizationOption[]
  menuItems     MenuItem[]
}

model CustomizationOption {
  id          String             @id @default(cuid())
  name        String
  price       Float              @default(0)
  image       String?
  isActive    Boolean            @default(true)
  sortOrder   Int                @default(0)
  groupId     String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  group       CustomizationGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Table {
  id             String     @id @default(cuid())
  restaurantId   String
  number         String     // Número da mesa (ex: "1", "A1", "VIP 1")
  qrCode         String     @unique // Hash único para o QR Code
  capacity       Int        @default(4) // Capacidade de pessoas
  isActive       Boolean    @default(true)
  notes          String?      // Observações (ex: "Área externa", "Próximo à janela")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  restaurant     Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders         Order[]
  waiterCalls    WaiterCall[]
  
  @@unique([restaurantId, number])
}

model Order {
  id               String      @id @default(cuid())
  restaurantId     String
  code             String      @unique
  status           String
  total            Decimal     @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  customerAddress  String?
  customerName     String?
  customerPhone    String?
  deliveryAddress  String?
  notes            String?
  paymentMethod    String?     @default("Dinheiro")
  
  // Tipo de pedido
  orderType        OrderType   @default(DELIVERY)
  tableId          String?
  
  // Timestamps de status
  confirmedAt      DateTime?
  preparingAt      DateTime?
  readyAt          DateTime?
  deliveredAt      DateTime?
  cancelledAt      DateTime?
  
  // Rastreamento
  estimatedTime    Int?
  trackingUrl      String?
  notificationSent Boolean     @default(false)
  
  restaurant       Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  table            Table?      @relation(fields: [tableId], references: [id])
  orderItems       OrderItem[]
}

model OrderItem {
  id             String   @id @default(cuid())
  quantity       Int
  unitPrice      Float
  totalPrice     Float
  notes          String?
  customizations String?  // JSON string com as customizações escolhidas
  orderId        String
  menuItemId     String
  menuItem       MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Analytics {
  id           String   @id @default(cuid())
  restaurantId String
  date         DateTime @default(now())
  pageViews    Int      @default(0)
  menuViews    Int      @default(0)
  itemViews    Json?
  totalOrders  Int      @default(0)
  totalRevenue Float    @default(0)

  @@unique([restaurantId, date])
}

model Ingredient {
  id           String                   @id @default(cuid())
  restaurantId String
  name         String
  unit         String
  pricePerUnit Float
  supplier     String?
  lastPurchase DateTime?
  notes        String?
  isActive     Boolean                  @default(true)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  restaurant   Restaurant               @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  priceHistory IngredientPriceHistory[]
  recipeItems  RecipeItem[]

  @@unique([restaurantId, name])
}

model IngredientPriceHistory {
  id           String     @id @default(cuid())
  ingredientId String
  price        Float
  date         DateTime   @default(now())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
}

model Recipe {
  id         String       @id @default(cuid())
  menuItemId String       @unique
  totalCost  Float        @default(0)
  cmv        Float        @default(0)
  margin     Float        @default(0)
  notes      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  menuItem   MenuItem     @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  items      RecipeItem[]
}

model RecipeItem {
  id           String     @id @default(cuid())
  recipeId     String
  ingredientId String
  quantity     Float
  cost         Float      @default(0)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  status             SubscriptionStatus @default(TRIAL)
  plan               String
  amount             Float
  trialEndsAt        DateTime?
  currentPeriodStart DateTime           @default(now())
  currentPeriodEnd   DateTime?
  canceledAt         DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  payments           Payment[]
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  subscriptionId    String?
  amount            Float
  status            PaymentStatus @default(PENDING)
  paymentMethod     String?
  paymentProvider   String        @default("mercadopago")
  providerPaymentId String?
  providerData      String?
  paidAt            DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coupon {
  id           String     @id @default(cuid())
  restaurantId String
  code         String     @unique
  type         CouponType
  discount     Float
  description  String?
  minValue     Float?
  maxUses      Int?
  currentUses  Int        @default(0)
  usesPerUser  Int?
  validFrom    DateTime   @default(now())
  validUntil   DateTime?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model UpsellRule {
  id            String   @id @default(cuid())
  restaurantId  String
  name          String
  active        Boolean  @default(true)
  
  // Configuração de exibição
  displayLocation String  @default("checkout") // "checkout" | "cart_modal" | "both"
  priority        Int     @default(0)
  
  // Produtos selecionados para upsell
  productIds      String[] // IDs dos produtos a serem sugeridos
  
  // Descontos individuais por produto (JSON: {productId: discountPercent})
  productDiscounts String? @default("{}") // Ex: {"prod1": 15, "prod2": 20}
  
  // Texto customizado
  title           String?  // Ex: "Complete seu pedido!"
  subtitle        String?  // Ex: "Clientes também levaram:"
  
  // Métricas
  views           Int      @default(0)
  clicks          Int      @default(0)
  conversions     Int      @default(0)
  revenue         Float    @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@index([restaurantId, active])
}

enum UserRole {
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum CouponType {
  FIXED
  PERCENT
}

enum OrderType {
  DELIVERY
  TABLE
  TAKEOUT
}

enum WaiterCallStatus {
  PENDING
  ATTENDED
  DISMISSED
}

model WaiterCall {
  id           String           @id @default(cuid())
  restaurantId String
  tableId      String
  tableNumber  String
  status       WaiterCallStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  attendedAt   DateTime?
  
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  table      Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  
  @@index([restaurantId, status])
  @@index([createdAt])
}
