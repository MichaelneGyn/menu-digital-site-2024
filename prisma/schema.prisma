generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  restaurants   Restaurant[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id              String @id @default(cuid())
  name            String
  description     String?
  slug            String @unique
  logo            String?
  bannerImage     String?
  primaryColor    String @default("#d32f2f")
  secondaryColor  String @default("#ffc107")
  
  // Contact Information
  phone           String?
  email           String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  
  // Business Hours
  openTime        String?
  closeTime       String?
  workingDays     String? @default("")
  
  // Social Media
  facebook        String?
  instagram       String?
  twitter         String?
  whatsapp        String?
  
  // Settings
  isActive        Boolean @default(true)
  allowOrders     Boolean @default(true)
  deliveryFee     Float @default(0)
  minOrderValue   Float @default(0)
  
  // Owner
  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  categories      Category[]
  menuItems       MenuItem[]
  orders          Order[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Category {
  id            String @id @default(cuid())
  name          String
  description   String?
  icon          String?
  sortOrder     Int @default(0)
  isActive      Boolean @default(true)
  
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  menuItems     MenuItem[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([restaurantId, name])
}

model MenuItem {
  id              String @id @default(cuid())
  name            String
  description     String?
  price           Float
  originalPrice   Float?
  image           String?
  isActive        Boolean @default(true)
  isPromo         Boolean @default(false)
  promoTag        String?
  sortOrder       Int @default(0)
  
  // Nutritional Info (optional)
  calories        Int?
  servingSize     String?
  ingredients     String?
  allergens       String?
  
  restaurantId    String
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  orderItems      OrderItem[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Order {
  id              String @id @default(cuid())
  orderNumber     String @unique
  status          OrderStatus @default(PENDING)
  total           Float
  deliveryFee     Float @default(0)
  
  // Customer Info
  customerName    String
  customerEmail   String?
  customerPhone   String
  customerAddress String?
  
  // Payment Info
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  
  restaurantId    String
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  orderItems      OrderItem[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model OrderItem {
  id          String @id @default(cuid())
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  notes       String?
  
  orderId     String
  order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  menuItemId  String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
}

model Analytics {
  id              String @id @default(cuid())
  restaurantId    String
  date            DateTime @default(now())
  pageViews       Int @default(0)
  menuViews       Int @default(0)
  itemViews       Json? // {itemId: viewCount}
  totalOrders     Int @default(0)
  totalRevenue    Float @default(0)
  
  @@unique([restaurantId, date])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
