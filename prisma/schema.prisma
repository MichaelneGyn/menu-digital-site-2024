// Schema atualizado - Build 2025-10-09
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String         @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  cpfCnpj          String?        @unique
  phone            String?
  resetToken       String?        @unique
  resetTokenExpiry DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  role             UserRole       @default(STAFF)
  accounts         Account[]
  restaurants      Restaurant[]
  sessions         Session[]
  subscriptions    Subscription[]
  payments         Payment[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id               String       @id @default(cuid())
  name             String
  description      String?
  slug             String       @unique
  logo             String?
  bannerImage      String?
  primaryColor     String       @default("#d32f2f")
  secondaryColor   String       @default("#ffc107")
  email            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  openTime         String?
  closeTime        String?
  workingDays      String?      @default("")
  facebook         String?
  instagram        String?
  twitter          String?
  whatsapp         String?
  isActive         Boolean      @default(true)
  allowOrders      Boolean      @default(true)
  deliveryFee      Float        @default(0)
  minOrderValue    Float        @default(0)
  userId           String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  bannerUrl        String?
  customCss        String?
  logoUrl          String?
  showDeliveryTime Boolean      @default(true)
  showRatings      Boolean      @default(true)
  theme            String       @default("light")
  pixKey           String?
  pixQrCode        String?
  categories       Category[]
  ingredients      Ingredient[]
  menuItems        MenuItem[]
  orders           Order[]
  coupons          Coupon[]
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Category {
  id           String     @id @default(cuid())
  name         String
  description  String?
  icon         String?
  sortOrder    Int        @default(0)
  isActive     Boolean    @default(true)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems    MenuItem[]

  @@unique([restaurantId, name])
}

model MenuItem {
  id            String      @id @default(cuid())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  image         String?
  isActive      Boolean     @default(true)
  isPromo       Boolean     @default(false)
  promoTag      String?
  sortOrder     Int         @default(0)
  calories      Int?
  servingSize   String?
  ingredients   String?
  allergens     String?
  restaurantId  String
  categoryId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  recipe        Recipe?

}

model Order {
  id               String           @id @default(cuid())
  restaurantId     String
  code             String           @unique
  status           OrderStatus      @default(PENDING)
  total            Decimal          @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  customerAddress  String?
  customerName     String?
  customerPhone    String?
  deliveryAddress  String?
  notes            String?
  paymentMethod    String?          @default("Dinheiro")
  
  // Novos campos para rastreamento
  confirmedAt      DateTime?
  preparingAt      DateTime?
  readyAt          DateTime?
  deliveredAt      DateTime?
  cancelledAt      DateTime?
  estimatedTime    Int?             // Tempo estimado em minutos
  notificationSent Boolean          @default(false)
  trackingUrl      String?          // URL de rastreamento para o cliente
  
  restaurant       Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems       OrderItem[]
  statusHistory    OrderStatusHistory[]
  notifications    OrderNotification[]

}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?
  orderId    String
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

}

model Analytics {
  id           String   @id @default(cuid())
  restaurantId String
  date         DateTime @default(now())
  pageViews    Int      @default(0)
  menuViews    Int      @default(0)
  itemViews    Json?
  totalOrders  Int      @default(0)
  totalRevenue Float    @default(0)

  @@unique([restaurantId, date])
}

model Ingredient {
  id           String                   @id @default(cuid())
  restaurantId String
  name         String
  unit         String
  pricePerUnit Float
  supplier     String?
  lastPurchase DateTime?
  notes        String?
  isActive     Boolean                  @default(true)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  restaurant   Restaurant               @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  priceHistory IngredientPriceHistory[]
  recipeItems  RecipeItem[]

  @@unique([restaurantId, name])
}

model IngredientPriceHistory {
  id           String     @id @default(cuid())
  ingredientId String
  price        Float
  date         DateTime   @default(now())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

}

model Recipe {
  id         String       @id @default(cuid())
  menuItemId String       @unique
  totalCost  Float        @default(0)
  cmv        Float        @default(0)
  margin     Float        @default(0)
  notes      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  menuItem   MenuItem     @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  items      RecipeItem[]

}

model RecipeItem {
  id           String     @id @default(cuid())
  recipeId     String
  ingredientId String
  quantity     Float
  cost         Float      @default(0)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  status             SubscriptionStatus @default(TRIAL)
  plan               String
  amount             Float
  trialEndsAt        DateTime?
  currentPeriodStart DateTime           @default(now())
  currentPeriodEnd   DateTime?
  canceledAt         DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments           Payment[]

}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  subscriptionId    String?
  amount            Float
  status            PaymentStatus @default(PENDING)
  paymentMethod     String?
  paymentProvider   String        @default("mercadopago")
  providerPaymentId String?
  providerData      String?
  paidAt            DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

}

model Coupon {
  id           String     @id @default(cuid())
  restaurantId String
  code         String     @unique
  type         CouponType
  discount     Float
  description  String?
  minValue     Float?
  maxUses      Int?
  currentUses  Int        @default(0)
  usesPerUser  Int?
  validFrom    DateTime   @default(now())
  validUntil   DateTime?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  message   String?
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

}

model OrderNotification {
  id          String   @id @default(cuid())
  orderId     String
  type        String   // SMS, WHATSAPP, EMAIL
  message     String
  sent        Boolean  @default(false)
  sentAt      DateTime?
  error       String?
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

}

enum UserRole {
  ADMIN
  STAFF

}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED

}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED

}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED

}

enum CouponType {
  FIXED
  PERCENT

}
