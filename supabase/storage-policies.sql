-- ============================================
-- üîí SUPABASE STORAGE - POL√çTICAS DE SEGURAN√áA (RLS)
-- ============================================
-- Execute estas queries no Supabase SQL Editor
-- Dashboard ‚Üí SQL Editor ‚Üí New Query
-- ============================================

-- ============================================
-- 1. HABILITAR RLS NO BUCKET
-- ============================================
-- IMPORTANTE: RLS DEVE estar ativo para seguran√ßa!

-- Verificar se RLS est√° ativo
SELECT 
    schemaname,
    tablename,
    rowsecurity
FROM pg_tables 
WHERE tablename = 'objects' 
AND schemaname = 'storage';

-- Se rowsecurity = false, ATIVE agora:
ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

-- ============================================
-- 2. POL√çTICAS PARA BUCKET 'menu-images'
-- ============================================

-- üîπ POL√çTICA 1: Permitir UPLOAD apenas para usu√°rios autenticados ou service_role
-- (Apenas admins podem fazer upload)
CREATE POLICY "Admin can upload menu images"
ON storage.objects
FOR INSERT
TO authenticated, service_role
WITH CHECK (
    bucket_id = 'menu-images' 
    AND auth.role() IN ('authenticated', 'service_role')
);

-- üîπ POL√çTICA 2: Permitir LEITURA P√öBLICA das imagens
-- (Qualquer pessoa pode VER as imagens do card√°pio)
CREATE POLICY "Public can view menu images"
ON storage.objects
FOR SELECT
TO public
USING (bucket_id = 'menu-images');

-- üîπ POL√çTICA 3: Permitir DELETE apenas para service_role
-- (Apenas sistema pode deletar)
CREATE POLICY "Admin can delete menu images"
ON storage.objects
FOR DELETE
TO service_role
USING (bucket_id = 'menu-images');

-- üîπ POL√çTICA 4: Permitir UPDATE apenas para service_role
CREATE POLICY "Admin can update menu images"
ON storage.objects
FOR UPDATE
TO service_role
USING (bucket_id = 'menu-images')
WITH CHECK (bucket_id = 'menu-images');

-- ============================================
-- 3. CONFIGURAR O BUCKET COMO P√öBLICO
-- ============================================
-- No Supabase Dashboard:
-- Storage ‚Üí menu-images ‚Üí Settings ‚Üí Public bucket: ON

-- Ou via SQL:
UPDATE storage.buckets 
SET public = true 
WHERE name = 'menu-images';

-- ============================================
-- 4. VERIFICAR POL√çTICAS ATIVAS
-- ============================================
SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE tablename = 'objects' 
AND schemaname = 'storage'
ORDER BY policyname;

-- ============================================
-- 5. REMOVER POL√çTICAS ANTIGAS (SE NECESS√ÅRIO)
-- ============================================
-- Se houver conflito, remova pol√≠ticas antigas:

-- DROP POLICY IF EXISTS "Admin can upload menu images" ON storage.objects;
-- DROP POLICY IF EXISTS "Public can view menu images" ON storage.objects;
-- DROP POLICY IF EXISTS "Admin can delete menu images" ON storage.objects;
-- DROP POLICY IF EXISTS "Admin can update menu images" ON storage.objects;

-- Depois recrie usando as queries acima

-- ============================================
-- 6. TESTE DE SEGURAN√áA
-- ============================================

-- ‚úÖ TESTE 1: Verificar se RLS est√° ATIVO
-- Resultado esperado: rowsecurity = true
SELECT tablename, rowsecurity 
FROM pg_tables 
WHERE tablename = 'objects';

-- ‚úÖ TESTE 2: Contar pol√≠ticas ativas
-- Resultado esperado: pelo menos 4 pol√≠ticas
SELECT COUNT(*) as total_policies 
FROM pg_policies 
WHERE tablename = 'objects' 
AND schemaname = 'storage';

-- ‚úÖ TESTE 3: Listar todas as pol√≠ticas
-- Resultado esperado: ver as 4 pol√≠ticas criadas acima
SELECT 
    policyname as "Nome da Pol√≠tica",
    cmd as "Opera√ß√£o",
    roles as "Pap√©is"
FROM pg_policies 
WHERE tablename = 'objects' 
AND schemaname = 'storage'
ORDER BY policyname;

-- ============================================
-- 7. POL√çTICAS ALTERNATIVAS (MAIS RESTRITIVAS)
-- ============================================
-- Se quiser que apenas service_role possa fazer tudo:

/*
-- Remover pol√≠ticas antigas
DROP POLICY IF EXISTS "Admin can upload menu images" ON storage.objects;
DROP POLICY IF EXISTS "Admin can delete menu images" ON storage.objects;
DROP POLICY IF EXISTS "Admin can update menu images" ON storage.objects;

-- Criar pol√≠tica √∫nica para service_role
CREATE POLICY "Service role full access to menu images"
ON storage.objects
FOR ALL
TO service_role
USING (bucket_id = 'menu-images')
WITH CHECK (bucket_id = 'menu-images');

-- Manter pol√≠tica de leitura p√∫blica
CREATE POLICY "Public read menu images"
ON storage.objects
FOR SELECT
TO public
USING (bucket_id = 'menu-images');
*/

-- ============================================
-- 8. MONITORAMENTO
-- ============================================

-- Ver tentativas de acesso bloqueadas (logs do Supabase)
-- Dashboard ‚Üí Logs ‚Üí Storage

-- Verificar tamanho do bucket
SELECT 
    pg_size_pretty(SUM(metadata->>'size')::bigint) as "Tamanho Total"
FROM storage.objects
WHERE bucket_id = 'menu-images';

-- Contar arquivos no bucket
SELECT COUNT(*) as "Total de Imagens"
FROM storage.objects
WHERE bucket_id = 'menu-images';

-- ============================================
-- 9. SEGURAN√áA ADICIONAL
-- ============================================

-- Limitar tamanho m√°ximo de arquivo (50MB)
UPDATE storage.buckets
SET file_size_limit = 52428800
WHERE name = 'menu-images';

-- Limitar tipos de arquivo permitidos
UPDATE storage.buckets
SET allowed_mime_types = ARRAY[
    'image/jpeg',
    'image/jpg', 
    'image/png',
    'image/gif',
    'image/webp'
]
WHERE name = 'menu-images';

-- ============================================
-- 10. TROUBLESHOOTING
-- ============================================

-- Se uploads falharem com erro "new row violates row-level security policy"
-- Verifique:
-- 1. RLS est√° ativo? (deve estar)
-- 2. Pol√≠ticas existem? (use query de verifica√ß√£o acima)
-- 3. Est√° usando SERVICE_ROLE_KEY? (n√£o ANON_KEY)
-- 4. Bucket existe? (Storage ‚Üí Buckets)
-- 5. Bucket √© p√∫blico? (Storage ‚Üí menu-images ‚Üí Settings)

-- Para debug, temporariamente DESABILITE RLS (N√ÉO FA√áA EM PRODU√á√ÉO!)
-- ALTER TABLE storage.objects DISABLE ROW LEVEL SECURITY;
-- TESTE O UPLOAD
-- ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

-- ============================================
-- ‚úÖ CHECKLIST FINAL
-- ============================================
/*
‚òê RLS est√° ENABLE em storage.objects
‚òê Bucket 'menu-images' existe
‚òê Bucket 'menu-images' √© PUBLIC
‚òê 4 pol√≠ticas criadas (upload, read, delete, update)
‚òê SERVICE_ROLE_KEY configurada no .env
‚òê Tamanho m√°ximo configurado (50MB)
‚òê Tipos MIME permitidos configurados
‚òê Testes de upload funcionando
‚òê URLs p√∫blicas acess√≠veis
*/

-- ============================================
-- üìö REFER√äNCIAS
-- ============================================
-- Documenta√ß√£o oficial: https://supabase.com/docs/guides/storage/security/access-control
-- RLS: https://supabase.com/docs/guides/auth/row-level-security
